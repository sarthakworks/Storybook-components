@use 'sass:math';

@function rem($size) {
    @return math.div($size, $font-size) * 1rem;
}

@mixin hover {
    @media (hover: hover) {
        &:hover {
            @content;
        }
    }
}

@mixin focus {
    &:focus {
        @content;
    }
}

@mixin active {
    &:active {
        @content;
    }
}

$breakpoints: (
    'extra-small': 200px,
    'small':360px,
    'medium': 768px,
    'large': 1024px,
    'extra-large': 1312px,
) !default;

//Simple mixing for media query with min-width capability
@mixin media($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
}

//Advance mixing for media query with min-width, max-width and orientation capability
@mixin media-advance($from: false, $until: false, $and: false, $media-type: all) {
    $min-width: 0;
    $max-width: 0;
    $query: '';

    //FROM: this breakpoint (inclusive)
    @if $from {
        @if type-of($from) ==number {
            $min-width: $from;
        } @else {
            $min-width: map-get($breakpoints, $from);
        }
    }

    //UNTIL: this breakpoint (exclusive)
    @if $until {
        @if type-of($until) ==number {
            $max-width: $until - 1px;
        } @else {
            $max-width: map-get($breakpoints, $until) - 1px;
        }
    }

    @if $min-width !=0 {
        $query: '#{$query} and (min-width: #{$min-width})';
    }

    @if $max-width !=0 {
        $query: '#{$query} and (max-width: #{$max-width})';
    }

    @if $and {
        $query: '#{$query} and (#{$and})';
    }

    @if ($media-type == 'all' and $query != '') {
        $media-type: '';
        $query: str-slice(unquote($query), 6);
    }

    @media #{$media-type + $query} {
        @content;
    }
}

// Truncating text: Requires element to be block or inline-block level
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Form placeholder text style
@mixin placeholder-text($color: #c2c8cb, $text-transform: none) {
    color: $color;
    text-transform: $text-transform;
    font-size: 14px;
    @include media(large) {
        font-size: 16px;
    }
    &:-ms-input-placeholder {
        color: $color;
        text-transform: $text-transform;
    }
    &::-webkit-input-placeholder {
        color: $color;
        text-transform: $text-transform;
    }
}

$map-for-directions: (
    'top': to top,
    'top-right': to top right,
    'right': to right,
    'bottom-right': to bottom right,
    'bottom': to bottom,
    'bottom-left': to bottom left,
    'left': to left,
    'top-left': to top left,
) !default;
@mixin linear-gradient($direction, $colors) {
    $list: ();
    @for $i from 1 through length($colors) {
        $list: append($list, nth($colors, $i), comma);
    }
    @if map-has-key($map-for-directions, $direction) {
        background: linear-gradient(map-get($map-for-directions, $direction), $list);
    } @else if not map-has-key($map-for-directions, $direction) {
        @if not index('deg', unit($direction)) {
            @error "#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.";
        } @else {
            background: linear-gradient($direction, $list);
        }
    }
}

@mixin heading(
    $fs-map,
    $family: $font-family-light,
    $text-color:$font-color-srk-midnight,
    $title-line-height: 1.2,
    $letter-spacing:-0.6px,	
    $weight:normal,
) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == null {
            font-size: $fs-font-size;
        } @else {
            @include media($fs-breakpoint) {
                font-size: $fs-font-size;
            }
        }
    }
    font-family: $family;
    color: $text-color;
    margin: 0;
    line-height: $title-line-height;
    font-weight: $weight;	
    letter-spacing: $letter-spacing;
}

@mixin text(
    $color: $font-color-srk-midnight,
    $family: $font-family-default,
    $size: 18px,
    $style: $font-style
) {
    color: $color;
    font-family: $family;
    font-size: $size;
    font-style: $style;
}

@mixin appearance-none {
    -webkit-appearance: none;
    -moz-appearance: none;
}
@mixin container-fixed($gutter: $grid-gutter-width){
    margin-right: auto;
    margin-left: auto;
    padding-left:  floor(($gutter / 2));
    padding-right: ceil(($gutter / 2));
}

@mixin container-content(){
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 $gutter-padding;
  float: unset !important;
	
}

@mixin responsive-font-size($fs-map) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == null {
            font-size: $fs-font-size;
        } @else {
            @include media($fs-breakpoint) {
                font-size: $fs-font-size;
            }
        }
    }
}

@mixin line-clamp($number-of-lines) {
    display: -webkit-box;
    -webkit-line-clamp: $number-of-lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

@-webkit-keyframes spinner {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
    }
    50% {
        opacity: 0.6;
        -webkit-transform: rotate(120deg);
        transform: rotate(120deg);
    }
    100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
        opacity: 1;
    }
}

/***BOX SHADOW***/
//Mixin with horizontal length, vertical length, blur, spread & color in r,g,b,a -> a -> alpha
@mixin boxShadow ($x, $y, $blur, $spread, $alpha, $color: rgba(10,22,70,0)) {
    box-shadow: $x $y $blur $spread $color;
    @content;
}